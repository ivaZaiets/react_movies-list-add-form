{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","patterns/Pattern.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","incorrectimgUrl","incorrectimdbUrl","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","pattern","NewMovie","onAdd","count","setCount","setTitle","setDescription","setimgUrl","setimdbUrl","setImdbId","setIncorrectimgUrl","setIncorrectimdbUrl","hasDisabled","onSubmit","preventDefault","test","newValue","disabled","App","moviesFromServer","setMovies","newMovie","cuurentMovies","ReactDOM","render","document","getElementById"],"mappings":"mSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCUpC,IAAMC,EAA6B,SAAC,GASpC,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,MAOI,IANJC,aAMI,MANIF,EAMJ,MALJG,mBAKI,sBALmBD,GAKnB,MAJJE,gBAII,aAHJC,gBAGI,MAHO,WAAS,EAGhB,EAFJC,EAEI,EAFJA,gBACAC,EACI,EADJA,iBAGA,EAAaC,oBAAS,2BAASR,EAAT,YAhBfS,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAca,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAWF,GAAWV,IAAaH,EAEzC,OACE,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ8B,QAASJ,EAAlC,SACGX,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE+B,KAAK,OACLL,GAAIA,EACJ,0BAAkBb,GAClBb,UAAWgC,IAAW,QAAS,CAC7B,YAAaH,GAAYV,GAAmBC,IAE9CJ,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAe,GAAK,OAAIf,EAASe,EAAMC,OAAOpB,MAA1B,EACfqB,OAAQ,kBAAMP,GAAW,EAAjB,MAIXC,GACC,mBAAG7B,UAAU,iBAAb,mBAAkCe,EAAlC,mBAGAI,GAAmBC,IACnB,mBAAGpB,UAAU,iBAAb,mBAAkCe,EAAlC,qBAIP,EClEYqB,EAAU,uKCOVC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAG1C,EAA0BjB,mBAAS,GAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KAEA,EAA0BnB,mBAAS,IAAnC,mBAAOjB,EAAP,KAAcqC,EAAd,KACA,EAAsCpB,mBAAS,IAA/C,mBAAOhB,EAAP,KAAoBqC,EAApB,KACA,EAA4BrB,mBAAS,IAArC,mBAAOnB,EAAP,KAAeyC,EAAf,KACA,EAA8BtB,mBAAS,IAAvC,mBAAOd,EAAP,KAAgBqC,EAAhB,KACA,EAA4BvB,mBAAS,IAArC,mBAAOV,EAAP,KAAekC,EAAf,KAEA,EAA8CxB,mBAAS,IAAvD,mBAAOF,EAAP,KAAwB2B,EAAxB,KACA,EAAgDzB,mBAAS,IAAzD,mBAAOD,EAAP,KAAyB2B,EAAzB,KAEMC,GAAe5C,IAAUF,IAAWK,IAAYI,EAgDtD,OACE,uBACEX,UAAU,WAEViD,SAvCiB,SAAChB,GAGpB,GAFAA,EAAMiB,kBAEDd,EAAQe,KAAKjD,KAAYkC,EAAQe,KAAK5C,GAIzC,OAHAuC,EAAmB,cACnBC,EAAoB,SAKjBX,EAAQe,KAAKjD,GAMbkC,EAAQe,KAAK5C,IAMlB+B,EAAM,CACJlC,QACAC,cACAH,SACAK,UACAI,WAGF6B,EAASD,EAAQ,GAxCjBE,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IAEVC,EAAmB,IACnBC,EAAoB,KAoBlBA,EAAoB,SANpBD,EAAmB,QAsBtB,EAGC,UAKE,oBAAI9C,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPc,SAAU,SAACkC,GACTX,EAASW,EACV,EACDnC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOT,EACPa,SAAU,SAACkC,GACTV,EAAeU,EAChB,IAGH,cAAC,EAAD,CACEvC,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPgB,SAAU,SAACkC,GACTT,EAAUS,GACVN,EAAmB,GACpB,EACD7B,UAAQ,EACRE,gBAAiBA,IAGnB,cAAC,EAAD,CACEN,KAAK,UACLE,MAAM,WACND,MAAOP,EACPW,SAAU,SAACkC,GACTR,EAAWQ,GACXL,EAAoB,GACrB,EACD9B,UAAQ,EACRG,iBAAkBA,IAGpB,cAAC,EAAD,CACEP,KAAK,SACLE,MAAM,UACND,MAAOH,EACPO,SAAU,SAACkC,GACTP,EAAUO,EACX,EACDnC,UAAQ,IAGV,qBAAKjB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE+B,KAAK,SACL,UAAQ,gBACR/B,UAAU,iBACVqD,SAAUL,EAJZ,uBA5DCT,EAwEV,E,OC3IYe,EAAM,WACjB,MAA4BjC,mBAAkBkC,GAA9C,mBAAO9C,EAAP,KAAe+C,EAAf,KAMA,OACE,sBAAKxD,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAUsC,MAVE,SAACmB,GACjBD,GAAU,SAAAE,GAAa,4BAAQA,GAAR,CAAuBD,GAAvB,GACxB,QAYF,ECpBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.f9f0b225.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  incorrectimgUrl?: string,\n  incorrectimdbUrl?: string,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  incorrectimgUrl,\n  incorrectimdbUrl,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || incorrectimgUrl || incorrectimdbUrl,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {(incorrectimgUrl || incorrectimdbUrl) && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\n\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { pattern } from '../../patterns/Pattern';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setimgUrl] = useState('');\n  const [imdbUrl, setimdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [incorrectimgUrl, setIncorrectimgUrl] = useState('');\n  const [incorrectimdbUrl, setIncorrectimdbUrl] = useState('');\n\n  const hasDisabled = !title || !imgUrl || !imdbUrl || !imdbId;\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setimgUrl('');\n    setimdbUrl('');\n    setImdbId('');\n\n    setIncorrectimgUrl('');\n    setIncorrectimdbUrl('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!pattern.test(imgUrl) && !pattern.test(imdbUrl)) {\n      setIncorrectimgUrl('Error');\n      setIncorrectimdbUrl('Error');\n\n      return;\n    }\n\n    if (!pattern.test(imgUrl)) {\n      setIncorrectimgUrl('Error');\n\n      return;\n    }\n\n    if (!pattern.test(imdbUrl)) {\n      setIncorrectimdbUrl('Error');\n\n      return;\n    }\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setCount(count + 1);\n\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newValue) => {\n          setTitle(newValue);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue) => {\n          setDescription(newValue);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newValue) => {\n          setimgUrl(newValue);\n          setIncorrectimgUrl('');\n        }}\n        required\n        incorrectimgUrl={incorrectimgUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newValue) => {\n          setimdbUrl(newValue);\n          setIncorrectimdbUrl('');\n        }}\n        required\n        incorrectimdbUrl={incorrectimdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newValue) => {\n          setImdbId(newValue);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={hasDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovies = (newMovie: Movie) => {\n    setMovies(cuurentMovies => [...cuurentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}